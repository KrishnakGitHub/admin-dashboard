[{"/home/ubuntu/workspace/dashboard/admin-dashboard/src/index.js":"1","/home/ubuntu/workspace/dashboard/admin-dashboard/src/App.js":"2","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/LoginPage.js":"3","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ProjectDetailsPage.js":"4","/home/ubuntu/workspace/dashboard/admin-dashboard/src/utils/PrivateRoute.js":"5","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/HomePage.js":"6","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/DashboardPage.js":"7","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ProjectPage.js":"8","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ClientDetailsPage.js":"9","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/RegisterPage.js":"10","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/NewProjectPage.js":"11","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ManagerClientPage.js":"12","/home/ubuntu/workspace/dashboard/admin-dashboard/src/components/Sidebar.js":"13","/home/ubuntu/workspace/dashboard/admin-dashboard/src/context/AuthContext.js":"14","/home/ubuntu/workspace/dashboard/admin-dashboard/src/components/DashboardGraph.js":"15","/home/ubuntu/workspace/dashboard/admin-dashboard/src/context/DashboardContext.js":"16"},{"size":251,"mtime":1668791904527,"results":"17","hashOfConfig":"18"},{"size":1950,"mtime":1668803930688,"results":"19","hashOfConfig":"18"},{"size":2141,"mtime":1668796142719,"results":"20","hashOfConfig":"18"},{"size":677,"mtime":1668626294706,"results":"21","hashOfConfig":"18"},{"size":355,"mtime":1668716118604,"results":"22","hashOfConfig":"18"},{"size":1203,"mtime":1668626294706,"results":"23","hashOfConfig":"18"},{"size":1796,"mtime":1668803945288,"results":"24","hashOfConfig":"18"},{"size":1390,"mtime":1668792035189,"results":"25","hashOfConfig":"18"},{"size":144,"mtime":1668626294706,"results":"26","hashOfConfig":"18"},{"size":1849,"mtime":1668794186061,"results":"27","hashOfConfig":"18"},{"size":135,"mtime":1668626294706,"results":"28","hashOfConfig":"18"},{"size":144,"mtime":1668626294706,"results":"29","hashOfConfig":"18"},{"size":2524,"mtime":1668795399445,"results":"30","hashOfConfig":"18"},{"size":3666,"mtime":1668803959449,"results":"31","hashOfConfig":"18"},{"size":131,"mtime":1668790772644,"results":"32","hashOfConfig":"18"},{"size":935,"mtime":1668802425742,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"14ml5u0",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ubuntu/workspace/dashboard/admin-dashboard/src/index.js",[],["70","71"],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/App.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/LoginPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ProjectDetailsPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/utils/PrivateRoute.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/HomePage.js",["72"],"import React, {useState, useEffect, useContext} from 'react';\nimport AuthContext from '../context/AuthContext';\n\nconst domain = 'https://dr-admin-dashboard.herokuapp.com'\n// const domain = 'https://8000-autumn-night-66818328.eu-ws4.runcode.io';\n\nconst HomePage = () => {\n    let [notes, setNotes] = useState([])\n    let {authTokens, logoutUser} = useContext(AuthContext)\n\n    useEffect(()=> {\n        getNotes()\n    }, [])\n\n\n    let getNotes = async() =>{\n        let response = await fetch(`${domain}/api/notes/`, {\n            method:'GET',\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization':'Bearer ' + String(authTokens.access)\n            }\n        })\n        let data = await response.json()\n\n        if(response.status === 200){\n            setNotes(data)\n        }else if(response.statusText === 'Unauthorized'){\n            logoutUser()\n        }\n        \n    }\n\n    return (\n        <div>\n            <p>You are logged to the home page!</p>\n\n\n            <ul>\n                {notes.map(note => (\n                    <li key={note.id} >{note.body}</li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default HomePage\n","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/DashboardPage.js",["73"],"import React, {useContext, useState, useEffect} from 'react';\nimport { Button } from 'reactstrap';\n\nimport DashboardGraph from '../components/DashboardGraph';\n\nconst domain = 'https://dr-admin-dashboard.herokuapp.com';\n// const domain = 'https://8000-autumn-night-66818328.eu-ws2.runcode.io';\n\nconst DashboardPage = () => {\n  let [dashboard, setDasboard] = useState([])\n  useEffect(() => {\n    getDasboard()\n  }, [])\n  \n  let getDasboard = async () => {\n    let response = await fetch(`${domain}/api/dashboard/`)\n    let data = await response.json()\n    setDasboard(data)\n    console.log(data)\n  }\n  return (\n    <div>\n      <div className=\"fw-bold\" style={{fontSize: \"1.525em\"}}>\n        <sapn><i className=\"bi bi-house-door-fill\"></i></sapn>\n        <span className=\"d-inline-block\"><h4> Dashboard</h4></span>\n      </div>\n      <div className=\"d-flex p-3 rounded total-row\">\n      <Button color=\"primary\" href=\"#\" tag=\"a\"> + create new project</Button>\n      </div>\n            <div className='row p-2'>\n              <div className=\"col m-2 p-3 bg-white rounded\">Total Clients\n                <span className=\"d-block justify-content-between\">{dashboard.client_count}</span>\n              </div>\n              <div className=\"col m-2 p-3 bg-white rounded\">Total Projects Completed\n                <span className=\"d-block justify-content-between\">\n                {/* {dashboard.data.map((note, index) => (\n                    {note}\n                ))} */}\n                </span>\n              </div>\n              <div className=\"col m-2 p-3 bg-white rounded\">Project Category\n                <span className=\"d-block justify-content-between\"></span>\n              </div>\n            </div>\n      <div>\n        <DashboardGraph/>\n      </div>\n     </div>\n  )\n}\n\nexport default DashboardPage","/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ProjectPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ClientDetailsPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/RegisterPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/NewProjectPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/pages/ManagerClientPage.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/components/Sidebar.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/context/AuthContext.js",["74"],"import { createContext, useState, useEffect } from 'react'\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom'\n\n\nconst domain = 'https://dr-admin-dashboard.herokuapp.com';\n// const domain = 'https://8000-autumn-night-66818328.eu-ws2.runcode.io';\n\n\nconst AuthContext = createContext()\n\nexport default AuthContext;\n\n\nexport const AuthProvider = ({children}) => {\n    let [authTokens, setAuthTokens] = useState(()=> localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\n    let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n    let [loading, setLoading] = useState(true)\n\n    const history = useHistory()\n\n    let RegisterUser = async (e )=> {\n        e.preventDefault()\n        let response = await fetch(`${domain}/api/register/`, {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'username':e.target.username.value, 'email':e.target.email.value, 'password':e.target.password.value})\n        })\n        let data = await response.json()\n\n        if(response.status === 200){\n            // setAuthTokens(data)\n            // setUser(jwt_decode(data.access))\n            // localStorage.setItem('authTokens', JSON.stringify(data))\n            alert(data.message)\n            history.push('/')\n        }else{\n            alert('Something went wrong!')\n        }\n    }\n\n    let loginUser = async (e )=> {\n        e.preventDefault()\n        let response = await fetch(`${domain}/api/token/`, {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n        })\n        let data = await response.json()\n\n        if(response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n            history.push('/')\n        }else{\n            alert('Something went wrong!')\n        }\n    }\n\n\n    let logoutUser = () => {\n        setAuthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n        history.push('/login')\n    }\n\n\n    let updateToken = async ()=> {\n\n        let response = await fetch(`${domain}/api/token/refresh/`, {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'refresh':authTokens?.refresh})\n        })\n\n        let data = await response.json()\n        \n        if (response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n        }else{\n            logoutUser()\n        }\n\n        if(loading){\n            setLoading(false)\n        }\n    }\n\n    let contextData = {\n        user:user,\n        authTokens:authTokens,\n        loginUser:loginUser,\n        RegisterUser:RegisterUser,\n        logoutUser:logoutUser,\n    }\n\n\n    useEffect(()=> {\n\n        if(loading){\n            updateToken()\n        }\n\n        let fourMinutes = 1000 * 60 * 4\n\n        let interval =  setInterval(()=> {\n            if(authTokens){\n                updateToken()\n            }\n        }, fourMinutes)\n        return ()=> clearInterval(interval)\n\n    }, [authTokens, loading])\n\n    return(\n        <AuthContext.Provider value={contextData} >\n            {loading ? null : children}\n        </AuthContext.Provider>\n    )\n}\n","/home/ubuntu/workspace/dashboard/admin-dashboard/src/components/DashboardGraph.js",[],"/home/ubuntu/workspace/dashboard/admin-dashboard/src/context/DashboardContext.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":13,"column":8,"nodeType":"81","endLine":13,"endColumn":10,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"87","line":123,"column":8,"nodeType":"81","endLine":123,"endColumn":29,"suggestions":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'updateToken'. Either include it or remove the dependency array.",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [getNotes]",{"range":"97","text":"98"},"Update the dependencies array to be: [authTokens, loading, updateToken]",{"range":"99","text":"100"},[419,421],"[getNotes]",[3498,3519],"[authTokens, loading, updateToken]"]